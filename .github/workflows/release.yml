name: Create Release

on:
  push:
    branches: [ main ]
    paths:
      - 'GSkard-Datapack/**'
      - 'GSkard-Resourcepack/**'
      - 'GSkard-Resourcepack-Music/**'
  pull_request:
    types: [closed]
    branches: [ main ]
    paths:
      - 'GSkard-Datapack/**'
      - 'GSkard-Resourcepack/**'
      - 'GSkard-Resourcepack-Music/**'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'preview'
        type: choice
        options:
        - preview
        - stable
      custom_version:
        description: 'Custom version (optional)'
        required: false
        type: string

permissions:
  contents: write

env:
  BASE_VERSION: "1.53"

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Git and GitHub CLI
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # 使用 apt 的官方源安装 GitHub CLI
        sudo apt-get update && sudo apt-get install -y gh
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
    - name: Determine version and release type
      id: version
      run: |
        # 获取最新 tag，如果不存在使用基础版本
        LATEST_TAG=$(git tag -l | sort -V | tail -n1 || echo "${{ env.BASE_VERSION }}")
        
        # 解析版本号
        VERSION="$LATEST_TAG"
        MAJOR=$(echo "$VERSION" | cut -d. -f1)
        MINOR=$(echo "$VERSION" | cut -d. -f2)
        PATCH=$(echo "$VERSION" | cut -d. -f3)
        
        # 初始化输出变量
        NEW_VERSION=""
        RELEASE_TYPE=""
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # 手动触发：使用自定义版本或按规则递增
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            if [ -z "$PATCH" ]; then
              NEW_VERSION="${MAJOR}.$((MINOR + 1))"
            else
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            fi
          fi
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        else
          # 自动触发：根据当前版本决定新版本和类型
          # 检查当前版本的release是否存在
          RELEASE_EXISTS=$(gh release view "$LATEST_TAG" 2>/dev/null && echo "true" || echo "false")
          
          if [ -z "$PATCH" ]; then
            # 大版本（如 1.53）
            if [ "$RELEASE_EXISTS" = "false" ]; then
              NEW_VERSION="${MAJOR}.${MINOR}"
              RELEASE_TYPE="stable"
            else
              NEW_VERSION="${MAJOR}.${MINOR}.1"
              RELEASE_TYPE="preview"
            fi
          else
            # 小版本（如 1.53.4）
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            RELEASE_TYPE="preview"
          fi
        fi
        
        # 输出版本信息
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG | New Version: $NEW_VERSION | Type: $RELEASE_TYPE"
        
    - name: Create distribution archives
      run: |
        mkdir -p dist
        
        for dir in GSkard-Datapack GSkard-Resourcepack GSkard-Resourcepack-Music; do
          cd "$dir" && zip -qr "../dist/${dir}.zip" . && cd ..
          echo "✓ Created dist/${dir}.zip"
        done
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ${{ steps.version.outputs.version }}
        body: |
          ## ${{ steps.version.outputs.release_type == 'stable' && '✅ 正式版本' || '📋📋 预览版本' }}
          
          版本号: ${{ steps.version.outputs.version }}
          
          **更新信息**:
          ${{ github.event.head_commit.message || github.event.pull_request.title || '手动发布' }}
          
        files: |
          dist/GSkard-Datapack.zip
          dist/GSkard-Resourcepack.zip
          dist/GSkard-Resourcepack-Music.zip
        draft: false
        prerelease: ${{ steps.version.outputs.release_type == 'preview' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update permanent tags
      if: always()
      run: |
        # 获取当前提交的哈希值
        CURRENT_COMMIT=$(git rev-parse HEAD)
        
        # 根据发布类型更新相应的常驻标签和 release
        if [ "${{ steps.version.outputs.release_type }}" = "stable" ]; then
          # 正式版本：更新 stable 标签和 release
          # 检查 stable release 是否存在
          if gh release view stable >/dev/null 2>&1; then
            # 如果存在，则编辑现有 release
            gh release edit stable \
              --title "Stable Release" \
              --notes "Latest stable release: ${{ steps.version.outputs.version }}" \
              --target $CURRENT_COMMIT
            echo "✓ Edited existing stable release to ${{ steps.version.outputs.version }} (commit: $CURRENT_COMMIT)"
          else
            # 如果不存在，则创建新 release
            gh release create stable \
              --title "Stable Release" \
              --notes "Latest stable release: ${{ steps.version.outputs.version }}" \
              --target $CURRENT_COMMIT \
              dist/GSkard-Datapack.zip \
              dist/GSkard-Resourcepack.zip \
              dist/GSkard-Resourcepack-Music.zip
            echo "✓ Created new stable release to ${{ steps.version.outputs.version }} (commit: $CURRENT_COMMIT)"
          fi
        else
          # 预览版本：更新 dev 标签和 release
          # 检查 dev release 是否存在
          if gh release view dev >/dev/null 2>&1; then
            # 如果存在，则编辑现有 release
            gh release edit dev \
              --title "Development Release" \
              --notes "Latest development release: ${{ steps.version.outputs.version }}" \
              --target $CURRENT_COMMIT \
              --prerelease
            echo "✓ Edited existing dev release to ${{ steps.version.outputs.version }} (commit: $CURRENT_COMMIT)"
          else
            # 如果不存在，则创建新 release
            gh release create dev \
              --title "Development Release" \
              --notes "Latest development release: ${{ steps.version.outputs.version }}" \
              --target $CURRENT_COMMIT \
              --prerelease \
              dist/GSkard-Datapack.zip \
              dist/GSkard-Resourcepack.zip \
              dist/GSkard-Resourcepack-Music.zip
            echo "✓ Created new dev release to ${{ steps.version.outputs.version }} (commit: $CURRENT_COMMIT)"
          fi
        fi
        
    - name: Cleanup
      if: always()
      run: rm -rf dist